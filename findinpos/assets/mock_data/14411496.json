{"by":"hyperrail","id":14411496,"parent":14411398,"text":"As Brian Harry alluded to, this is in fact very close to the previous system. As I recall it from my time at Microsoft:<p>The Windows source control system used to be organized as a large number (about 20 for product code alone, plus twice that number for test code and large test data files) of independent master source repositories.<p>The source checkouts from these repos would be arranged in a hierarchy on disk. For example, if root\\ were the root of your working copy, files directly under root\\ would come from the root repo, files under root\\base\\ from the base repo, root\\testsrc\\basetest from basetest, and so on.<p>To do cross repo operations you used a tool called &quot;qx&quot; (where &quot;q&quot; was the name of the basic source control client). Qx was a bunch of Perl scripts, some of which wrapped q functions and others that implemented higher-level functions such as merging branches. However, qx did not try to atomically do operations across all affected repos.<p>(The closest analog to this in git land would be submodules.)<p>While source control was organized this way, build and test ran on all of Windows as a single unit. There was investigation into trying to more thoroughly modularize Windows in the past, but I think the cost was always judged too great.<p>Mark Lucovsky did a talk several years ago on this source control system, among other aspects of Windows development:<p><a href=\"https:&#x2F;&#x2F;www.usenix.org&#x2F;legacy&#x2F;events&#x2F;usenix-win2000&#x2F;tech.html\" rel=\"nofollow\">https:&#x2F;&#x2F;www.usenix.org&#x2F;legacy&#x2F;events&#x2F;usenix-win2000&#x2F;tech.htm...</a><p>I believe it is still valid for folks not using GVFS to access Windows sources.","time":1495645147,"type":"comment"}